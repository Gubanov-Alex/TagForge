name: Continuous Integration

on:
  push:
    branches: [ main, develop, feat/*, feat/CI/CD, fix/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23'
  GOLANGCI_LINT_VERSION: 'v1.62.2'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: config_service_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: |
          go.sum
          go.mod

    - name: Verify dependencies
      run: go mod verify

    - name: Install migrate tool
      run: |
        curl -L https://github.com/golang-migrate/migrate/releases/download/v4.18.1/migrate.linux-amd64.tar.gz | tar xvz
        sudo mv migrate /usr/local/bin/

    - name: Run database migrations
      run: |
        migrate -path migrations -database "postgres://postgres:postgres@localhost:5432/config_service_test?sslmode=disable" up
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/config_service_test?sslmode=disable

    - name: Run tests
      run: go test -v -race -cover -coverprofile=coverage.out ./...
      env:
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
        DATABASE_USER: postgres
        DATABASE_PASSWORD: postgres
        DATABASE_NAME: config_service_test
        DATABASE_SSL_MODE: disable
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        LOGGER_LEVEL: error

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Run benchmarks
      run: go test -bench=. -benchmem ./...

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: ${{ env.GOLANGCI_LINT_VERSION }}
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build binary
      run: |
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
          -ldflags="-s -w -X main.version=${{ github.sha }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.gitCommit=${{ github.sha }}" \
          -o bin/config-service \
          cmd/server/main.go

    - name: Build Docker image
      run: |
        docker build -f deployments/Dockerfile -t config-service:${{ github.sha }} .

    - name: Run Docker container test
      run: |
        docker run --rm -d --name test-container \
          -p 8080:8080 \
          -e DATABASE_HOST=host.docker.internal \
          -e REDIS_HOST=host.docker.internal \
          config-service:${{ github.sha }}
        
        # Wait for container to start
        sleep 15
        
        # Test health endpoint with retry
        for i in {1..5}; do
          if curl -f http://localhost:8080/health; then
            echo "Health check passed"
            break
          else
            echo "Health check failed, attempt $i/5"
            sleep 5
          fi
        done
        
        # Stop container
        docker stop test-container

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: config-service-binary-${{ github.sha }}
        path: bin/config-service
        retention-days: 30

  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install swag
      run: go install github.com/swaggo/swag/cmd/swag@latest

    - name: Generate Swagger docs
      run: swag init -g cmd/server/main.go --output docs/swagger

    - name: Upload documentation artifact
      uses: actions/upload-artifact@v4
      with:
        name: swagger-docs-${{ github.sha }}
        path: docs/swagger/
        retention-days: 30
