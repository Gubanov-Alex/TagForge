name: Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

env:
  GO_VERSION: '1.23'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# Required permissions for GHCR and releases
permissions:
  contents: write
  packages: write
  actions: read

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging

    defaults:
      run:
        working-directory: ./config-service

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: |
          config-service/go.sum
          config-service/go.mod

    - name: Generate Swagger docs
      run: |
        go install github.com/swaggo/swag/cmd/swag@latest
        swag init -g cmd/server/main.go --output docs/swagger

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/config-service
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=staging-latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./config-service
        file: ./config-service/deployments/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          VERSION=${{ github.sha }}
          BUILD_TIME=${{ github.run_id }}
          GIT_COMMIT=${{ github.sha }}

    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "üì¶ Image: ${{ steps.meta.outputs.tags }}"
        echo "üè∑Ô∏è  Tags: ${{ steps.meta.outputs.tags }}"
        echo "üìã Labels: ${{ steps.meta.outputs.labels }}"
        
        # Example deployment commands (uncomment and modify as needed):
        # kubectl config use-context staging
        # kubectl set image deployment/config-service config-service=${{ fromJSON(steps.meta.outputs.json).tags[0] }}
        # kubectl rollout status deployment/config-service --timeout=300s
        
        echo "‚úÖ Staging deployment completed!"

    - name: Run integration tests
      run: |
        echo "üß™ Running integration tests against staging..."
        
        # Wait for deployment to be ready
        sleep 30
        
        # Example integration tests (uncomment and modify as needed):
        # echo "Testing health endpoint..."
        # curl -f https://staging-config-service.example.com/health
        # 
        # echo "Testing API endpoints..."
        # curl -f https://staging-config-service.example.com/api/v1/ping
        # curl -f https://staging-config-service.example.com/api/v1/environments
        
        echo "‚úÖ Integration tests passed!"

    - name: Notify deployment
      run: |
        echo "üì¢ Staging deployment notification"
        echo "Environment: staging"
        echo "Version: ${{ github.sha }}"
        echo "Image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.event.head_commit.message }}"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production

    defaults:
      run:
        working-directory: ./config-service

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: |
          config-service/go.sum
          config-service/go.mod

    - name: Generate Swagger docs
      run: |
        go install github.com/swaggo/swag/cmd/swag@latest
        swag init -g cmd/server/main.go --output docs/swagger

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/config-service
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./config-service
        file: ./config-service/deployments/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          VERSION=${{ github.ref_name }}
          BUILD_TIME=${{ github.run_id }}
          GIT_COMMIT=${{ github.sha }}

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "üì¶ Image: ${{ steps.meta.outputs.tags }}"
        echo "üè∑Ô∏è  Version: ${{ github.ref_name }}"
        
        # Example production deployment commands (uncomment and modify as needed):
        # kubectl config use-context production
        # kubectl set image deployment/config-service config-service=${{ fromJSON(steps.meta.outputs.json).tags[0] }}
        # kubectl rollout status deployment/config-service --timeout=600s
        
        echo "‚úÖ Production deployment completed!"

    - name: Run smoke tests
      run: |
        echo "üí® Running smoke tests against production..."
        
        # Wait for deployment to be ready
        sleep 60
        
        # Example smoke tests (uncomment and modify as needed):
        # echo "Testing critical endpoints..."
        # curl -f https://config-service.example.com/health
        # curl -f https://config-service.example.com/api/v1/ping
        
        echo "‚úÖ Smoke tests passed!"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## üöÄ Config Service Release ${{ github.ref_name }}
          
          ### üì¶ Docker Images
          ```bash
          docker pull ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          ```
          
          ### üìã Deployment Info
          - **Version**: ${{ github.ref_name }}
          - **Commit**: ${{ github.sha }}
          - **Built**: ${{ github.run_id }}
          - **Platforms**: linux/amd64, linux/arm64
          
          ### üîó Links
          - [Swagger Documentation](https://config-service.example.com/swagger/index.html)
          - [Health Check](https://config-service.example.com/health)
          
          ### üìù Installation
          ```bash
          # Docker
          docker run -p 8080:8080 ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          
          # Kubernetes
          kubectl set image deployment/config-service config-service=${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          ```

    - name: Notify production deployment
      run: |
        echo "üì¢ Production deployment notification"
        echo "Environment: production"
        echo "Version: ${{ github.ref_name }}"
        echo "Image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}"
        echo "Release: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
